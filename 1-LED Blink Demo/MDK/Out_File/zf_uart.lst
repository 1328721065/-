C251 COMPILER V5.60.0,  zf_uart                                                            17/10/22  16:58:22  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_uart
OBJECT MODULE PLACED IN .\Out_File\zf_uart.obj
COMPILER INVOKED BY: D:\keil_c251\C251\BIN\C251.EXE ..\..\Libraries\seekfree_libraries\zf_uart.c XSMALL INTR2 WARNINGLEV
                    -EL(3) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\
                    -CODE;..\USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\zf_uart.lst) OBJECT(.\Out_File\zf_uart.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file                uart
   11           * @company                     成都逐飞科技有限公司
   12           * @author              逐飞科技(QQ790875685)
   13           * @version             查看doc内version文件 版本说明
   14           * @Software            MDK FOR C251 V5.60
   15           * @Target core         STC16F40K128
   16           * @Taobao              https://seekfree.taobao.com/
   17           * @date                2020-4-14
   18           ********************************************************************************************************
             -************/
   19          
   20          #include "zf_uart.h"
   21          #include "board.h"
   22             
   23          #define FOSC 30000000
   24          
   25          uint8 busy[5];                           //接收忙标志位
   26          
   27          uint8 uart1_tx_buff[UART1_TX_BUFFER_SIZE];      //发送缓冲
   28          uint8 uart1_rx_buff[UART1_RX_BUFFER_SIZE];      //接收缓冲
   29          
   30          
   31          //-------------------------------------------------------------------------------------------------------
             -------------
   32          //  @brief      串口初始化
   33          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
   34          //  @param      uart_rx_pin     串口接收引脚
   35          //  @param      uart_tx_pin     串口发送引脚
   36          //  @param      baud                    串口波特率
   37          //  @param      tim_n                   使用tim_n作为串口波特率发生器(TIM1-TIM4)
   38          //  @return     NULL            
   39          //  Sample usage:               uart_init(UART_1, UART1_RX_P30, UART1_TX_P31, 115200, TIM_2);        //初
             -始化串口1 波特率115200 发送引脚使用P31 接收引脚使用P30 ,使用定时器2作为波特率发生器
   40          //  @note                       串口1使用 定时器1或者定时器2 作为波特率发生器。
   41          //                                                              串口2使用 定时器2                        作为波特率发生器。
   42          //                                                              串口3使用 定时器3或者定时器2 作为波特率发生器。
   43          //                                                              串口4使用 定时器4或者定时器2 作为波特率发生器。
   44          //                              STC16F仅有 定时器0-定时器4，这5个定时器。
   45          //                                                              编码器采集数据也需要定时器作为外部计数。
   46          //                                                              如果不同的串口，使用同一个定时器，串口的波特率以最后一个初始化为准
   47          
   48          void uart_init(UARTN_enum uart_n, UARTPIN_enum uart_rx_pin, UARTPIN_enum uart_tx_pin, uint32 baud,TIMN_en
             -um tim_n)
   49          {
   50   1          uint16 brt;
   51   1      
   52   1          brt = (uint16)(65536 - (FOSC/baud/4));
C251 COMPILER V5.60.0,  zf_uart                                                            17/10/22  16:58:22  PAGE 2   

   53   1      
   54   1      
   55   1          switch(uart_n)
   56   1          {
   57   2          case UART_1:
   58   2          {
   59   3              if(TIM_1 == tim_n)
   60   3              {
   61   4                  SCON |= 0x50;
   62   4                  TMOD |= 0x00;
   63   4                  TL1 = brt;
   64   4                  TH1 = brt >> 8;
   65   4                  AUXR |= 0x40;
   66   4                  TR1 = 1;
   67   4              }
   68   3              else if(TIM_2 == tim_n)
   69   3              {
   70   4                  SCON |= 0x50;
   71   4                  T2L = brt;
   72   4                  T2H = brt >> 8;
   73   4                  AUXR |= 0x15;
   74   4              }
   75   3              P_SW1 &= ~(0x03<<6);
   76   3              if((UART1_RX_P30 == uart_rx_pin) && (UART1_TX_P31 == uart_tx_pin))
   77   3              {
   78   4                  P_SW1 |= 0x00;
   79   4              }
   80   3              else if((UART1_RX_P36 == uart_rx_pin) && (UART1_TX_P37 == uart_tx_pin))
   81   3              {
   82   4                  P_SW1 |= 0x40;
   83   4              }
   84   3              else if((UART1_RX_P16 == uart_rx_pin) && (UART1_TX_P17 == uart_tx_pin))
   85   3              {
   86   4                  P_SW1 |= 0x80;
   87   4              }
   88   3              else if((UART1_RX_P43 == uart_rx_pin) && (UART1_TX_P44 == uart_tx_pin))
   89   3              {
   90   4                  P_SW1 |= 0xc0;
   91   4              }
   92   3              //UART1_SET_TX_FLAG;
   93   3              UART1_ENABLE_INTERRUPT;
   94   3              break;
   95   3          }
   96   2      
   97   2          case UART_2:
   98   2          {
   99   3              if(TIM_2 == tim_n)
  100   3              {
  101   4                  S2CON |= 0x10;
  102   4                  T2L = brt;
  103   4                  T2H = brt >> 8;
  104   4                  AUXR |= 0x14;
  105   4              }
  106   3      
  107   3              P_SW2 &= ~(0x01<<0);
  108   3              if((UART2_RX_P10 == uart_rx_pin) && (UART2_TX_P11 == uart_tx_pin))
  109   3              {
  110   4                  P_SW2 |= 0x00;
  111   4              }
  112   3              else if((UART2_RX_P46 == uart_rx_pin) && (UART2_TX_P47 == uart_tx_pin))
  113   3              {
  114   4                  P_SW2 |= 0x01;
  115   4              }
  116   3      
  117   3              //UART2_SET_TX_FLAG;
  118   3              UART2_ENABLE_INTERRUPT;
C251 COMPILER V5.60.0,  zf_uart                                                            17/10/22  16:58:22  PAGE 3   

  119   3              break;
  120   3          }
  121   2      
  122   2          case UART_3:
  123   2          {
  124   3              if(TIM_2 == tim_n)
  125   3              {
  126   4                  S3CON |= 0x10;
  127   4                  T2L = brt;
  128   4                  T2H = brt >> 8;
  129   4                  AUXR |= 0x14;
  130   4              }
  131   3              else if(TIM_3 == tim_n)
  132   3              {
  133   4                  S3CON |= 0x50;
  134   4                  T3L = brt;
  135   4                  T3H = brt >> 8;
  136   4                  T4T3M |= 0x0a;
  137   4              }
  138   3      
  139   3              P_SW2 &= ~(0x01<<1);
  140   3              if((UART3_RX_P00 == uart_rx_pin) && (UART3_TX_P01 == uart_tx_pin))
  141   3              {
  142   4                  P_SW2 |= 0x00;
  143   4              }
  144   3              else if((UART3_RX_P50 == uart_rx_pin) && (UART3_TX_P51 == uart_tx_pin))
  145   3              {
  146   4                  P_SW2 |= 0x02;
  147   4              }
  148   3      
  149   3              //UART3_SET_TX_FLAG;
  150   3              UART3_ENABLE_INTERRUPT;
  151   3              break;
  152   3          }
  153   2      
  154   2          case UART_4:
  155   2          {
  156   3              if(TIM_2 == tim_n)
  157   3              {
  158   4                  S4CON |= 0x10;
  159   4                  T2L = brt;
  160   4                  T2H = brt >> 8;
  161   4                  AUXR |= 0x14;
  162   4              }
  163   3              else if(TIM_4 == tim_n)
  164   3              {
  165   4                  S4CON |= 0x50;
  166   4                  T4L = brt;
  167   4                  T4H = brt >> 8;
  168   4                  T4T3M |= 0xa0;
  169   4              }
  170   3      
  171   3              P_SW2 &= ~(0x01<<2);
  172   3              if((UART4_RX_P02 == uart_rx_pin) && (UART4_TX_P03 == uart_tx_pin))
  173   3              {
  174   4                  P_SW2 |= 0x00;
  175   4              }
  176   3              else if((UART4_RX_P52 == uart_rx_pin) && (UART4_TX_P53 == uart_tx_pin))
  177   3              {
  178   4                  P5M0 = 0x00;
  179   4                  P5M1 = 0x01<<2;//P5.2 需要设置为高阻
  180   4                  P_SW2 |= 0x04;
  181   4              }
  182   3              UART4_SET_TX_FLAG;
  183   3              //UART4_ENABLE_INTERRUPT;
  184   3              break;
C251 COMPILER V5.60.0,  zf_uart                                                            17/10/22  16:58:22  PAGE 4   

  185   3          }
  186   2          }
  187   1      
  188   1      }
  189          
  190          //-------------------------------------------------------------------------------------------------------
             -------------
  191          //  @brief      串口字节输出
  192          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  193          //  @param      dat             需要发送的字节
  194          //  @return     void        
  195          //  Sample usage:               uart_putchar(UART_1,0xA5);       // 串口1发送0xA5
  196          //-------------------------------------------------------------------------------------------------------
             -------------
  197          void uart_putchar(UARTN_enum uart_n,uint8 dat)
  198          {
  199   1          switch(uart_n)
  200   1          {
  201   2          case UART_1:
  202   2              //while (UART1_GET_TX_FLAG);
  203   2              //UART1_CLEAR_TX_FLAG;
  204   2              SBUF = dat;
  205   2              break;
  206   2          case UART_2:
  207   2              //while (UART2_GET_TX_FLAG);
  208   2              //UART2_CLEAR_TX_FLAG;
  209   2              S2BUF = dat;
  210   2              break;
  211   2          case UART_3:
  212   2              //while (UART3_GET_TX_FLAG);
  213   2              //UART3_CLEAR_TX_FLAG;
  214   2              S3BUF = dat;
  215   2              break;
  216   2          case UART_4:
  217   2              while (!UART4_GET_TX_FLAG);
  218   2              UART4_CLEAR_TX_FLAG;
  219   2              S4BUF = dat;
  220   2              break;
  221   2          }
  222   1      }
  223          
  224          
  225          //-------------------------------------------------------------------------------------------------------
             -------------
  226          //  @brief      串口发送数组
  227          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  228          //  @param      *buff           要发送的数组地址
  229          //  @param      len             发送长度
  230          //  @return     void
  231          //  Sample usage:               uart_putbuff(UART_1,&a[0],5);
  232          //-------------------------------------------------------------------------------------------------------
             -------------
  233          void uart_putbuff(UARTN_enum uart_n,uint8 *p,uint16 len)
  234          {
  235   1          while(len--)
  236   1              uart_putchar(uart_n,*p++);
  237   1      }
  238          
  239          
  240          //-------------------------------------------------------------------------------------------------------
             -------------
  241          //  @brief      串口发送字符串
  242          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  243          //  @param      *str            要发送的字符串地址
  244          //  @return     void
  245          //  Sample usage:               uart_putstr(UART_1,"i lvoe you"); 
C251 COMPILER V5.60.0,  zf_uart                                                            17/10/22  16:58:22  PAGE 5   

  246          //-------------------------------------------------------------------------------------------------------
             -------------
  247          void uart_putstr(UARTN_enum uart_n,uint8 *str)
  248          {
  249   1          while(*str)
  250   1          {
  251   2              uart_putchar(uart_n, *str++);
  252   2          }
  253   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       545     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       205         12
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
